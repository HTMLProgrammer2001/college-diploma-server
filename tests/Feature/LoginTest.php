<?php

namespace Tests\Feature;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Tests\TestCase;

class LoginTest extends TestCase
{
    private $user;

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->user = User::query()->first();
    }

    /**
     * Test successfully user login
     *
     * @return void
     */
    public function testSuccess()
    {
        $response = $this->postJson('/api/login', [
            'email' => $this->user->email,
            'password' => '20012007'
        ]);

        $response->assertSuccessful();
    }

    /**
     * Test invalid email input
     *
     * @return void
     */
    public function testInvalid()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'bademail',
            'password' => '20012007'
        ]);

        $response->assertJsonValidationErrors(['email']);
        $this->assertEquals($response['errors']['email'][0], "The email must be a valid email address.");
    }

    /**
     * Test empty email in input
     *
     * @return void
     */
    public function testEmptyEmail()
    {
        $response = $this->postJson('/api/login', [
            'email' => null,
            'password' => '20012007'
        ]);

        $response->assertJsonValidationErrors(['email']);
        $this->assertEquals($response['errors']['email'][0], "The email field is required.");
    }


    /**
     * Test empty password in input
     *
     * @return void
     */
    public function testEmptyPassword()
    {
        $response = $this->postJson('/api/login', [
           'email' => $this->user->email,
           'password' => null
        ]);

        $response->assertJsonValidationErrors(['password']);
        $this->assertEquals($response['errors']['password'][0], "The password field is required.");
    }

    /**
     * Test too short password
     *
     * @return void
     */
    public function testShortPassword()
    {
        $response = $this->postJson('/api/login', [
            'email' => $this->user->email,
            'password' => '11'
        ]);

        $response->assertJsonValidationErrors(['password']);
        $this->assertEquals($response['errors']['password'][0], "The password must be at least 8 characters.");
    }

    /**
     * Test too long password
     *
     * @return void
     */
    public function testLongPassword()
    {
        $response = $this->postJson('/api/login', [
            'email' => $this->user->email,
            'password' => '111111111111111111111111111111111'
        ]);

        $response->assertJsonValidationErrors(['password']);
        $this->assertEquals($response['errors']['password'][0], "The password may not be greater than 32 characters.");
    }

    /**
     * Test valid data for un existing user in DB
     *
     * @return void
     */
    public function testUnExistUser()
    {
        $response = $this->postJson('/api/login', [
            'email' => 'test@mail.ru',
            'password' => '200120072017'
        ]);

        $response->assertJsonValidationErrors(['email']);
        $this->assertEquals($response['errors']['email'][0], "The selected email is invalid.");
    }
}
